version: 2.1

orbs:
  slack: circleci/slack@3.4.2

parameters:
  api_triggered:
    type: boolean
    description: Whether the pipeline was triggered through the CircleCi API (https://circleci.com/docs/api/v2/?shell#trigger-a-new-pipeline).
    default: false
  production_delivery:
    type: boolean
    description: Whether to deliver to production or not (beta channel and testflight).
    default: false

commands:
  restore_environment_variables:
    description: Sets the environment variables specified in the file 'environment_variables'. Make sure the file is persisted and has been attached.
    steps:
      - run:
          name: List environment variables
          command: cat environment_variables
      - run:
          name: Restore environment variables
          command: cat environment_variables >> ${BASH_ENV}

workflows:
  version: 2
  commit:
    unless: << pipeline.parameters.api_triggered >>
    jobs:
      - prepare_build
      - build_android:
          e2e_build: true
          requires:
            - prepare_build
      - build_ios:
          e2e_build: true
          requires:
            - prepare_build
      - e2e:
          requires:
            - build_ios
            - build_android

  api_triggered_delivery:
    when: << pipeline.parameters.api_triggered >>
    jobs:
      - prepare_build
      - build_android:
          e2e_build: false
          requires:
            - prepare_build
      - build_ios:
          e2e_build: false
          requires:
            - prepare_build
      - bump_version:
          requires: # Bump version should only depend on build_ and not delivery_. Sometimes upload to the stores fails only for iOS or Android. Then we still should bump the version.
            - build_android
            - build_ios
      - deliver_android:
          production: << pipeline.parameters.production_delivery >>
          requires:
            - build_android
            - bump_version
      - deliver_ios:
          production: << pipeline.parameters.production_delivery >>
          requires:
            - build_ios
            - bump_version

  weekly_development_delivery:
    triggers:
      - schedule:
          cron: "0 3 * * 4" # For sanity checks for this syntax: https://crontab.guru/
          filters:
            branches:
              only:
                - develop
    jobs:
      - prepare_build
      - build_android:
          e2e_build: false
          requires:
            - prepare_build
      - build_ios:
          e2e_build: false
          requires:
            - prepare_build
      - bump_version:
          requires: # Bump version should only depend on build_ and not delivery_. Sometimes upload to the stores fails only for iOS or Android. Then we still should bump the version.
            - build_android
            - build_ios
      - deliver_android:
          production: false
          requires:
            - bump_version
      - deliver_ios:
          production: false
          requires:
            - bump_version

  bi_weekly_production_delivery:
    triggers:
      - schedule:
          cron: "0 5 1,15 * *" # For sanity checks for this syntax: https://crontab.guru/
          filters:
            branches:
              only:
                - develop
    jobs:
      - prepare_build
      - build_android:
          e2e_build: false
          requires:
            - prepare_build
      - build_ios:
          e2e_build: false
          requires:
            - prepare_build
      - bump_version:
          requires: # Bump version should only depend on build_ and not delivery_. Sometimes upload to the stores fails only for iOS or Android. Then we should still bump the version.
            - build_android
            - build_ios
      - await_production_approval:
          type: approval
          requires:
            - bump_version
      - deliver_android:
          production: true
          requires:
            - await_production_approval
      - deliver_ios:
          production: true
          requires:
            - await_production_approval

jobs:
  prepare_build:
    docker:
      - image: circleci/android:api-28-node
    resource_class: small
    environment:
      TOTAL_CPUS: 1 # For resource_class small
    shell: /bin/bash -eo pipefail
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys: # Integer Prefix used for manually invalidating caches by incrementing.
            - 2-yarn-{{ arch }}-{{ checksum "yarn.lock" }}
            - 2-yarn-{{ arch }}-
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: 2-yarn-{{ arch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - node_modules
      - run:
          name: Linting check
          command: yarn run lint
      - run:
          name: Flow-type check
          command: yarn run flow:check-now --max-workers ${TOTAL_CPUS}
      - run:
          name: Unit tests
          command: yarn run test --maxWorkers ${TOTAL_CPUS}
      - run:
          name: Calculate next version name
          command: echo "export NEW_VERSION_NAME=$(tools/next-version calc | jq .versionName)" >> environment_variables
      - run:
          name: Calculate next version code
          command: echo "export NEW_VERSION_CODE=$(tools/next-version calc | jq .versionCode)" >> environment_variables
      - persist_to_workspace:
          root: ./
          paths:
            - environment_variables

  build_android:
    parameters:
      e2e_build:
        description: Whether to create a build for E2E testing
        type: boolean
    docker:
      - image: circleci/android:api-28-node
    resource_class: medium
    environment:
      E2E_TEST_IDS: <<# parameters.e2e_build >>1<</ parameters.e2e_build >> # Empty string equals to false in JS
      FASTLANE_SKIP_UPDATE_CHECK: true
    shell: /bin/bash -eo pipefail
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_environment_variables
      - restore_cache:
          keys:
            - 1-gems-{{ arch }}-{{ checksum "android/Gemfile.lock" }}
            - 1-gems-{{ arch }}-
      - run:
          command: bundle check || bundle install --path vendor/bundle
          working_directory: android
      - save_cache:
          key: 1-gems-{{ arch }}-{{ checksum "android/Gemfile.lock" }}
          paths:
            - android/vendor/bundle
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - 2-yarn-{{ arch }}-{{ checksum "yarn.lock" }}
            - 2-yarn-{{ arch }}-
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: 2-yarn-{{ arch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - node_modules
      - run:
          name: "[FL] Prepare Android Keystore"
          command: bundle exec fastlane keystore
          working_directory: android
      - restore_cache:
          keys:
            - 1-gradle-{{ checksum "android/build.gradle" }}-{{ checksum "android/app/build.gradle" }}-{{ checksum "android/settings.gradle" }}
            - 1-gradle-
      - run:
          name: "[FL] Download Dependencies"
          command: bundle exec fastlane dependencies
          working_directory: android
      - save_cache:
          paths:
            - ~/.gradle
          key: 1-gradle-{{ checksum "android/build.gradle" }}-{{ checksum "android/app/build.gradle" }}-{{ checksum "android/settings.gradle" }}
      - run:
          name: "[FL] Build"
          command: bundle exec fastlane build version_name:${NEW_VERSION_NAME} version_code:${NEW_VERSION_CODE}
          working_directory: android
      - store_artifacts:
          path: android/app/build/outputs/apk/release/
      - persist_to_workspace:
          root: android/app/build/generated/sourcemaps/react/release/
          paths:
            - index.android.bundle.map
      - persist_to_workspace:
          root: android/app/build/outputs/apk/release/
          paths:
            - app-release.apk

  build_ios:
    parameters:
      e2e_build:
        description: Whether to create a build for E2E testing
        type: boolean
    macos:
      xcode: 11.2.0
    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_SKIP_UPDATE_CHECK: true
      E2E_TEST_IDS: <<# parameters.e2e_build >>1<</ parameters.e2e_build >> # Empty string equals to false in JS
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_environment_variables
      - restore_cache:
          keys:
            - 1-gems-{{ arch }}-{{ checksum "ios/Gemfile.lock" }}
            - 1-gems-{{ arch }}-
      - run:
          command: bundle check || bundle install --path vendor/bundle
          working_directory: ios
      - save_cache:
          key: 1-gems-{{ arch }}-{{ checksum "ios/Gemfile.lock" }}
          paths:
            - ios/vendor/bundle
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - 4-yarn-{{ arch }}-{{ checksum "yarn.lock" }}
            - 4-yarn-{{ arch }}-
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: 4-yarn-{{ arch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/Library/Caches/Yarn/
            - node_modules
      - restore_cache:
          name: Restore CocoaPods Cache
          keys:
            - 1-pods-{{ arch }}-{{ checksum "ios/Podfile.lock" }}
            - 1-pods-{{ arch }}-
      - run:
          name: "[CP] Install CocoaPods"
          command: bundle exec pod install --deployment
          working_directory: ios
      - save_cache:
          name: Save CocoaPods Cache
          key: 1-pods-{{ arch }}-{{ checksum "ios/Podfile.lock" }}
          paths:
            - ~/Library/Caches/CocoaPods/
      - run:
          name: "[FL] Build"
          command: bundle exec fastlane build version_name:${NEW_VERSION_NAME} version_code:${NEW_VERSION_CODE}
          working_directory: ios
      - store_artifacts:
          path: ios/output/gym/
      - persist_to_workspace:
          root: ios/
          paths:
            - index.ios.bundle.map
      - persist_to_workspace:
          root: ios/output/gym/
          paths:
            - Integreat.ipa

  bump_version:
    docker:
      - image: circleci/android:api-28-node
    resource_class: small
    shell: /bin/bash -eo pipefail
    steps:
      - add_ssh_keys:
          fingerprints:
            - "9a:0f:b1:f0:97:c8:db:3f:be:87:a4:9b:09:7f:d3:af"
      - checkout
      - attach_workspace:
          at: .
      - restore_environment_variables
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - 2-yarn-{{ arch }}-{{ checksum "yarn.lock" }}
            - 2-yarn-{{ arch }}-
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: 2-yarn-{{ arch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - node_modules
      - run:
          name: Bump version
          command: tools/bump-version bump-to ${NEW_VERSION_NAME} --deliverino-private-key ${DELIVERINO_PRIVATE_KEY} --owner ${CIRCLE_PROJECT_USERNAME} --repo ${CIRCLE_PROJECT_REPONAME} --branch ${CIRCLE_BRANCH}

  deliver_android:
    parameters:
      production:
        description: Whether to roll out the build to production
        type: boolean
    docker:
      - image: circleci/android:api-28-node
    resource_class: small
    shell: /bin/bash -eo pipefail
    environment:
      FASTLANE_SKIP_UPDATE_CHECK: true
    steps:
      - run: 'curl -sL https://sentry.io/get-cli/ | bash'
      - checkout
      - attach_workspace:
          at: .
      - restore_environment_variables
      - restore_cache:
          keys:
            - 1-gems-{{ arch }}-{{ checksum "Gemfile.lock" }}
            - 1-gems-{{ arch }}-
      - run:
          command: bundle check || bundle install --path vendor/bundle
      - save_cache:
          key: 1-gems-{{ arch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: "[FL] Browserstack Upload Live"
          command: bundle exec fastlane android browserstack_upload_live
      - run:
          name: "[FL] Play Store Upload"
          command: bundle exec fastlane android playstore_upload production:"<< parameters.production >>" version_name:${NEW_VERSION_NAME} version_code:${NEW_VERSION_CODE}
      - run:
          name: "[FL] Upload to Sentry"
          command: bundle exec fastlane android sentry_upload version_name:${NEW_VERSION_NAME} version_code:${NEW_VERSION_CODE}
      - slack/notify:
          message: Integreat ${NEW_VERSION_NAME} has been released successfully on Android!
          webhook: ${SLACK_URL}

  deliver_ios:
    parameters:
      production:
        description: Whether to roll out the build to production
        type: boolean
    macos:
      xcode: 11.2.0
    environment:
      FASTLANE_SKIP_UPDATE_CHECK: true
    shell: /bin/bash --login -o pipefail
    steps:
      - run: 'curl -sL https://sentry.io/get-cli/ | bash'
      - checkout
      - attach_workspace:
          at: .
      - restore_environment_variables
      - restore_cache:
          keys:
            - 1-gems-{{ arch }}-{{ checksum "Gemfile.lock" }}
            - 1-gems-{{ arch }}-
      - run:
          command: bundle check || bundle install --path vendor/bundle
      - save_cache:
          key: 1-gems-{{ arch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: "[FL] Browserstack Upload Live"
          command: bundle exec fastlane ios browserstack_upload_live
      - when:
          condition: <<parameters.production>>
          steps:
            - run:
                name: "[FL] App Store Connect Upload"
                command: bundle exec fastlane ios appstoreconnect_upload
      - unless:
          condition: <<parameters.production>>
          steps:
            - run:
                name: "[FL] TestFlight Upload"
                command: bundle exec fastlane ios testflight_upload version_name:${NEW_VERSION_NAME}
      - run:
          name: "[FL] Upload to Sentry"
          command: bundle exec fastlane ios sentry_upload version_name:${NEW_VERSION_NAME} version_code:${NEW_VERSION_CODE}
      - slack/notify:
         message: Integreat ${NEW_VERSION_NAME} has been released successfully on iOS!
         webhook: ${SLACK_URL}

  e2e:
    docker:
      - image: circleci/android:api-28-node
    resource_class: small
    shell: /bin/bash -eo pipefail
    environment:
      FASTLANE_SKIP_UPDATE_CHECK: true
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_environment_variables
      - restore_cache:
          keys:
            - 1-gems-{{ arch }}-{{ checksum "Gemfile.lock" }}
            - 1-gems-{{ arch }}-
      - run:
          command: bundle check || bundle install --path vendor/bundle
      - save_cache:
          key: 1-gems-{{ arch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: "[FL] E2E Tests on Browserstack"
          command: bundle exec fastlane android browserstack_e2e_tests
      - run:
          name: "[FL] E2E Tests on Browserstack"
          command: bundle exec fastlane ios browserstack_e2e_tests
