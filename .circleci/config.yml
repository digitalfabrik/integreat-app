### AUTO GENERATED. DO NOT MODIFY. ###
# This file should be auto generated by the files in the src folder.
# You can update it by running `yarn run circleci:update-config`.
commands:
    check_config:
        description: This command builds the circle config from the files in src and validates that it is up-to-date and valid.
        steps:
            - run:
                command: curl -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | sudo bash
                name: Install CircleCI CLI
            - run:
                command: yarn run circleci:update-config
                name: Build circle config
            - run:
                command: |
                    FILES_MODIFIED=""
                    setcommit () {
                      FILES_MODIFIED=$(git status -s | grep -i -E '.*circleci/config.yml')
                    }
                    setcommit || true
                    if [ -z "$FILES_MODIFIED" ]
                    then
                      echo "The CircleCI config is up to date."
                      exit 0;
                    else
                      echo "The CircleCI config is not up to date. You can update it by running `yarn run circleci:update-config`."
                      exit 1;
                    fi
                name: CircleCI config up to date
            - run:
                command: circleci config validate
                name: Validate circle config
    restore_environment_variables:
        description: Sets the environment variables specified in the file 'environment_variables'. Make sure the file is persisted and has been attached.
        steps:
            - run:
                command: cat environment_variables
                name: List environment variables
            - run:
                command: cat environment_variables >> ${BASH_ENV}
                name: Restore environment variables
jobs:
    build_android:
        docker:
            - image: circleci/android:api-28-node
        environment:
            FASTLANE_SKIP_UPDATE_CHECK: true
            TOTAL_CPUS: 2
        parameters:
            build_for_delivery:
                description: Whether builds are delivered to the store. If true, integreat and malte builds are created.
                type: boolean
        resource_class: medium
        shell: /bin/bash -eo pipefail
        steps:
            - add_ssh_keys:
                fingerprints:
                    - 9a:0f:b1:f0:97:c8:db:3f:be:87:a4:9b:09:7f:d3:af
            - checkout
            - attach_workspace:
                at: .
            - restore_environment_variables
            - restore_cache:
                keys:
                    - 2-gems-{{ arch }}-{{ checksum "android/Gemfile.lock" }}
                    - 2-gems-{{ arch }}-
            - run:
                command: bundle check || bundle install --path vendor/bundle
                working_directory: android
            - save_cache:
                key: 2-gems-{{ arch }}-{{ checksum "android/Gemfile.lock" }}
                paths:
                    - android/vendor/bundle
            - restore_cache:
                keys:
                    - 3-yarn-{{ arch }}-{{ checksum "yarn.lock" }}
                    - 3-yarn-{{ arch }}-
                name: Restore Yarn Package Cache
            - run:
                command: yarn install --frozen-lockfile
                name: Install Dependencies
            - save_cache:
                key: 3-yarn-{{ arch }}-{{ checksum "yarn.lock" }}
                name: Save Yarn Package Cache
                paths:
                    - ~/.cache/yarn
                    - node_modules
            - run:
                command: bundle exec fastlane keystore
                name: '[FL] Prepare Android Keystore'
                working_directory: android
            - restore_cache:
                keys:
                    - 1-gradle-{{ checksum "android/build.gradle" }}-{{ checksum "android/app/build.gradle" }}-{{ checksum "android/settings.gradle" }}
                    - 1-gradle-
            - run:
                command: bundle exec fastlane dependencies
                name: '[FL] Download Dependencies'
                working_directory: android
            - save_cache:
                key: 1-gradle-{{ checksum "android/build.gradle" }}-{{ checksum "android/app/build.gradle" }}-{{ checksum "android/settings.gradle" }}
                paths:
                    - ~/.gradle
            - run:
                command: mkdir --parents android/output/apk
                name: Create output dir
            - when:
                condition: << parameters.build_for_delivery >>
                steps:
                    - run:
                        command: ./gradlew clean && bundle exec fastlane build version_name:${NEW_VERSION_NAME} version_code:${NEW_VERSION_CODE} build_config_name:integreat
                        name: '[FL] integreat build'
                        working_directory: android
                    - run:
                        command: mv android/app/build/outputs/apk/release/app-release.apk android/output/apk/integreat.apk
                        name: Rename apk
                    - run:
                        command: mv android/app/build/generated/sourcemaps/react/release/index.android.bundle.map android/output/integreat.android.bundle.map
                        name: Rename sourcemap
                    - run:
                        command: ./gradlew clean && bundle exec fastlane build version_name:${NEW_VERSION_NAME} version_code:${NEW_VERSION_CODE} build_config_name:malte
                        name: '[FL] malte build'
                        working_directory: android
                    - run:
                        command: mv android/app/build/outputs/apk/release/app-release.apk android/output/apk/malte.apk
                        name: Rename apk
                    - run:
                        command: mv android/app/build/generated/sourcemaps/react/release/index.android.bundle.map android/output/malte.android.bundle.map
                        name: Rename sourcemap
            - run:
                command: ./gradlew clean && bundle exec fastlane build version_name:${NEW_VERSION_NAME} version_code:${NEW_VERSION_CODE} build_config_name:integreat-e2e
                name: '[FL] integreat-e2e build'
                working_directory: android
            - run:
                command: mv android/app/build/outputs/apk/release/app-release.apk android/output/apk/integreat-e2e.apk
                name: Rename apk
            - store_artifacts:
                path: android/output/apk
            - when:
                condition: << parameters.build_for_delivery >>
                steps:
                    - persist_to_workspace:
                        paths:
                            - integreat.android.bundle.map
                            - malte.android.bundle.map
                        root: android/output
            - persist_to_workspace:
                paths:
                    - integreat.apk
                    - malte.apk
                    - integreat-e2e.apk
                root: android/output/apk
    build_ios:
        environment:
            FASTLANE_SKIP_UPDATE_CHECK: true
            FL_OUTPUT_DIR: output
            TOTAL_CPUS: 4
        macos:
            xcode: 11.5.0
        parameters:
            build_for_delivery:
                description: Whether builds are delivered to the store. If true, integreat and malte builds are created.
                type: boolean
        shell: /bin/bash --login -o pipefail
        steps:
            - add_ssh_keys:
                fingerprints:
                    - 9a:0f:b1:f0:97:c8:db:3f:be:87:a4:9b:09:7f:d3:af
            - checkout
            - attach_workspace:
                at: .
            - restore_environment_variables
            - restore_cache:
                keys:
                    - 2-gems-{{ arch }}-{{ checksum "ios/Gemfile.lock" }}
                    - 2-gems-{{ arch }}-
            - run:
                command: bundle check || bundle install --path vendor/bundle
                working_directory: ios
            - save_cache:
                key: 2-gems-{{ arch }}-{{ checksum "ios/Gemfile.lock" }}
                paths:
                    - ios/vendor/bundle
            - restore_cache:
                keys:
                    - 5-yarn-{{ arch }}-{{ checksum "yarn.lock" }}
                    - 5-yarn-{{ arch }}-
                name: Restore Yarn Package Cache
            - run:
                command: yarn install --frozen-lockfile
                name: Install Dependencies
            - save_cache:
                key: 5-yarn-{{ arch }}-{{ checksum "yarn.lock" }}
                name: Save Yarn Package Cache
                paths:
                    - ~/Library/Caches/Yarn/
                    - node_modules
            - restore_cache:
                keys:
                    - 2-pods-{{ arch }}-{{ checksum "ios/Podfile.lock" }}
                    - 2-pods-{{ arch }}-
                name: Restore CocoaPods Cache
            - run:
                command: bundle exec pod install --deployment
                name: '[CP] Install CocoaPods'
                working_directory: ios
            - save_cache:
                key: 2-pods-{{ arch }}-{{ checksum "ios/Podfile.lock" }}
                name: Save CocoaPods Cache
                paths:
                    - ~/Library/Caches/CocoaPods/
            - when:
                condition: << parameters.build_for_delivery >>
                steps:
                    - run:
                        command: bundle exec fastlane build version_name:${NEW_VERSION_NAME} version_code:${NEW_VERSION_CODE} build_config_name:integreat
                        name: '[FL] integreat build'
                        working_directory: ios
                    - run:
                        command: mv ios/index.ios.bundle.map ios/output/integreat.ios.bundle.map
                        name: Rename sourcemap
                    - run:
                        command: bundle exec fastlane build version_name:${NEW_VERSION_NAME} version_code:${NEW_VERSION_CODE} build_config_name:malte
                        name: '[FL] malte build'
                        working_directory: ios
                    - run:
                        command: mv ios/index.ios.bundle.map ios/output/malte.ios.bundle.map
                        name: Rename sourcemap
            - run:
                command: bundle exec fastlane build version_name:${NEW_VERSION_NAME} version_code:${NEW_VERSION_CODE} build_config_name:integreat-e2e
                name: '[FL] integreat-e2e build'
                working_directory: ios
            - store_artifacts:
                path: ios/output/gym/
            - when:
                condition: << parameters.build_for_delivery >>
                steps:
                    - persist_to_workspace:
                        paths:
                            - integreat.ios.bundle.map
                            - malte.ios.bundle.map
                        root: ios/output
            - persist_to_workspace:
                paths:
                    - integreat.ipa
                    - malte.ipa
                    - integreat-e2e.ipa
                root: ios/output/gym/
    deliver_android:
        docker:
            - image: circleci/android:api-28-node
        environment:
            FASTLANE_SKIP_UPDATE_CHECK: true
        parameters:
            production_delivery:
                description: Whether to deliver the build to production.
                type: boolean
        resource_class: small
        shell: /bin/bash -eo pipefail
        steps:
            - run: curl -sL https://sentry.io/get-cli/ | bash
            - checkout
            - attach_workspace:
                at: .
            - restore_environment_variables
            - restore_cache:
                keys:
                    - 2-gems-{{ arch }}-{{ checksum "Gemfile.lock" }}
                    - 2-gems-{{ arch }}-
            - run:
                command: bundle check || bundle install --path vendor/bundle
            - save_cache:
                key: 2-gems-{{ arch }}-{{ checksum "Gemfile.lock" }}
                paths:
                    - vendor/bundle
            - run:
                command: bundle exec fastlane android browserstack_upload_live app_name:integreat
                name: '[FL] Browserstack Upload Live'
            - run:
                command: bundle exec fastlane android playstore_upload app_name:integreat production_delivery:"<< parameters.production_delivery >>" version_name:${NEW_VERSION_NAME} version_code:${NEW_VERSION_CODE}
                name: '[FL] Play Store Upload'
            - run:
                command: bundle exec fastlane android sentry_upload app_name:integreat version_name:${NEW_VERSION_NAME} version_code:${NEW_VERSION_CODE}
                name: '[FL] Upload to Sentry'
            - slack/notify:
                message: Integreat ${NEW_VERSION_NAME} has been released successfully on Android!
                webhook: ${SLACK_URL}
    deliver_ios:
        environment:
            FASTLANE_SKIP_UPDATE_CHECK: true
        macos:
            xcode: 11.2.0
        parameters:
            production_delivery:
                description: Whether to deliver the build to production.
                type: boolean
        shell: /bin/bash --login -o pipefail
        steps:
            - run: curl -sL https://sentry.io/get-cli/ | bash
            - checkout
            - attach_workspace:
                at: .
            - restore_environment_variables
            - restore_cache:
                keys:
                    - 2-gems-{{ arch }}-{{ checksum "Gemfile.lock" }}
                    - 2-gems-{{ arch }}-
            - run:
                command: bundle check || bundle install --path vendor/bundle
            - save_cache:
                key: 2-gems-{{ arch }}-{{ checksum "Gemfile.lock" }}
                paths:
                    - vendor/bundle
            - run:
                command: bundle exec fastlane ios browserstack_upload_live app_name:integreat
                name: '[FL] Browserstack Upload Live'
            - when:
                condition: << parameters.production_delivery >>
                steps:
                    - run:
                        command: bundle exec fastlane ios appstoreconnect_upload app_name:integreat
                        name: '[FL] App Store Connect Upload'
            - unless:
                condition: << parameters.production_delivery >>
                steps:
                    - run:
                        command: bundle exec fastlane ios testflight_upload app_name:integreat version_name:${NEW_VERSION_NAME}
                        name: '[FL] TestFlight Upload'
            - run:
                command: bundle exec fastlane ios sentry_upload app_name:integreat version_name:${NEW_VERSION_NAME} version_code:${NEW_VERSION_CODE}
                name: '[FL] Upload to Sentry'
            - slack/notify:
                message: Integreat ${NEW_VERSION_NAME} has been released successfully on iOS!
                webhook: ${SLACK_URL}
    e2e:
        docker:
            - image: circleci/android:api-28-node
        environment:
            FASTLANE_SKIP_UPDATE_CHECK: true
        resource_class: small
        shell: /bin/bash -eo pipefail
        steps:
            - checkout
            - attach_workspace:
                at: .
            - restore_environment_variables
            - restore_cache:
                keys:
                    - 2-gems-{{ arch }}-{{ checksum "Gemfile.lock" }}
                    - 2-gems-{{ arch }}-
            - run:
                command: bundle check || bundle install --path vendor/bundle
            - save_cache:
                key: 2-gems-{{ arch }}-{{ checksum "Gemfile.lock" }}
                paths:
                    - vendor/bundle
            - restore_cache:
                keys:
                    - 3-yarn-{{ arch }}-{{ checksum "yarn.lock" }}
                name: Restore Yarn Package Cache
            - run:
                command: yarn install --frozen-lockfile
                name: Install Dependencies
            - save_cache:
                key: 3-yarn-{{ arch }}-{{ checksum "yarn.lock" }}
                name: Save Yarn Package Cache
                paths:
                    - ~/.cache/yarn
                    - node_modules
            - run:
                command: bundle exec fastlane android browserstack_e2e_tests app_name:integreat-e2e
                name: '[FL] Android E2E Tests on Browserstack'
            - run:
                command: bundle exec fastlane ios browserstack_e2e_tests app_name:integreat-e2e
                name: '[FL] iOS E2E Tests on Browserstack'
    prepare_build:
        docker:
            - image: circleci/node:12.16.3
        environment:
            TOTAL_CPUS: 1
        resource_class: small
        shell: /bin/bash -eo pipefail
        steps:
            - checkout
            - check_config
            - restore_cache:
                keys:
                    - 3-yarn-{{ arch }}-{{ checksum "yarn.lock" }}
                    - 3-yarn-{{ arch }}-
                name: Restore Yarn Package Cache
            - run:
                command: yarn install --frozen-lockfile
                name: Install Dependencies
            - save_cache:
                key: 3-yarn-{{ arch }}-{{ checksum "yarn.lock" }}
                name: Save Yarn Package Cache
                paths:
                    - ~/.cache/yarn
                    - node_modules
            - run:
                command: yarn run lint
                name: Linting check
            - run:
                command: yarn run flow:check-now --max-workers ${TOTAL_CPUS}
                name: Flow-type check
            - run:
                command: yarn run test --maxWorkers ${TOTAL_CPUS}
                name: Unit tests
            - run:
                command: echo "export NEW_VERSION_NAME=$(tools/next-version calc | jq .versionName)" >> environment_variables
                name: Calculate next version name
            - run:
                command: echo "export NEW_VERSION_CODE=$(tools/next-version calc | jq .versionCode)" >> environment_variables
                name: Calculate next version code
            - persist_to_workspace:
                paths:
                    - environment_variables
                root: ./
    prepare_delivery:
        docker:
            - image: circleci/node:12.16.3
        parameters:
            production_delivery:
                description: Whether builds are delivered to the production store. If set to true, jira and github releases are created.
                type: boolean
        resource_class: small
        steps:
            - checkout
            - attach_workspace:
                at: .
            - restore_environment_variables
            - restore_cache:
                keys:
                    - 3-yarn-{{ arch }}-{{ checksum "yarn.lock" }}
                    - 3-yarn-{{ arch }}-
                name: Restore Yarn Package Cache
            - run:
                command: yarn install --frozen-lockfile
                name: Install Dependencies
            - save_cache:
                key: 3-yarn-{{ arch }}-{{ checksum "yarn.lock" }}
                name: Save Yarn Package Cache
                paths:
                    - ~/.cache/yarn
                    - node_modules
            - when:
                condition: << parameters.production_delivery >>
                steps:
                    - run:
                        command: tools/create-jira-release create-release ${NEW_VERSION_NAME} --private-key ${JIRA_PRIVATE_KEY} --access-token ${JIRA_OAUTH_TOKEN} --consumer-key ${JIRA_CONSUMER_KEY} --project-name ${CIRCLE_PROJECT_REPONAME}
                        name: Create jira release
                    - run:
                        command: tools/move-release-notes move-to ${NEW_VERSION_NAME} --deliverino-private-key ${DELIVERINO_PRIVATE_KEY} --owner ${CIRCLE_PROJECT_USERNAME} --repo ${CIRCLE_PROJECT_REPONAME} --branch ${CIRCLE_BRANCH} --commit-sha ${CIRCLE_SHA1}
                        name: Move release notes
            - run:
                command: tools/bump-version bump-to ${NEW_VERSION_NAME} ${NEW_VERSION_CODE} --deliverino-private-key ${DELIVERINO_PRIVATE_KEY} --owner ${CIRCLE_PROJECT_USERNAME} --repo ${CIRCLE_PROJECT_REPONAME} --branch ${CIRCLE_BRANCH} <<# parameters.production_delivery >> --release-candidate <</ parameters.production_delivery >>
                name: Bump version
orbs:
    slack: circleci/slack@3.4.2
parameters:
    api_triggered:
        default: false
        description: Whether the pipeline was triggered through the CircleCi API (https://circleci.com/docs/api/v2/?shell#trigger-a-new-pipeline).
        type: boolean
    production_delivery:
        default: false
        description: Whether to deliver to production or not (beta channel and testflight).
        type: boolean
version: 2.1
workflows:
    api_triggered_delivery:
        jobs:
            - prepare_build
            - build_android:
                build_for_delivery: true
                requires:
                    - prepare_build
            - build_ios:
                build_for_delivery: true
                requires:
                    - prepare_build
            - e2e:
                requires:
                    - build_ios
                    - build_android
            - prepare_delivery:
                production_delivery: << pipeline.parameters.production_delivery >>
                requires:
                    - e2e
            - deliver_android:
                production_delivery: << pipeline.parameters.production_delivery >>
                requires:
                    - prepare_delivery
            - deliver_ios:
                production_delivery: << pipeline.parameters.production_delivery >>
                requires:
                    - prepare_delivery
        when: << pipeline.parameters.api_triggered >>
    bi_weekly_development_delivery:
        jobs:
            - prepare_build
            - build_android:
                build_for_delivery: true
                requires:
                    - prepare_build
            - build_ios:
                build_for_delivery: true
                requires:
                    - prepare_build
            - e2e:
                requires:
                    - build_ios
                    - build_android
            - prepare_delivery:
                production_delivery: << pipeline.parameters.production_delivery >>
                requires:
                    - e2e
            - deliver_android:
                production_delivery: false
                requires:
                    - prepare_delivery
            - deliver_ios:
                production_delivery: false
                requires:
                    - prepare_delivery
        triggers:
            - schedule:
                cron: 0 3 8,22 * *
                filters:
                    branches:
                        only:
                            - develop
    bi_weekly_production_delivery:
        jobs:
            - prepare_build
            - build_android:
                build_for_delivery: true
                requires:
                    - prepare_build
            - build_ios:
                build_for_delivery: true
                requires:
                    - prepare_build
            - e2e:
                requires:
                    - build_ios
                    - build_android
            - prepare_delivery:
                production_delivery: << pipeline.parameters.production_delivery >>
                requires:
                    - e2e
            - await_production_approval:
                requires:
                    - prepare_delivery
                type: approval
            - deliver_android:
                production_delivery: true
                requires:
                    - await_production_approval
            - deliver_ios:
                production_delivery: true
                requires:
                    - await_production_approval
        triggers:
            - schedule:
                cron: 0 3 1,15 * *
                filters:
                    branches:
                        only:
                            - develop
    commit:
        jobs:
            - prepare_build
            - build_android:
                build_for_delivery: false
                requires:
                    - prepare_build
            - build_ios:
                build_for_delivery: false
                requires:
                    - prepare_build
            - e2e:
                requires:
                    - build_ios
                    - build_android
        unless: << pipeline.parameters.api_triggered >>
    version: 2

