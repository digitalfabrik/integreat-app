### AUTO GENERATED. DO NOT MODIFY. ###
# This file should be auto generated by the files in the src folder.
# You can update it by running `yarn run circleci:update-config`.
commands:
    check_config:
        description: This command builds the circle config from the files in src and validates that it is up-to-date and valid.
        steps:
            - run:
                command: curl -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | sudo bash
                name: Install CircleCI CLI
            - run:
                command: yarn run circleci:update-config
                name: Build circle config
            - run:
                command: |
                    FILES_MODIFIED=""
                    setcommit () {
                      FILES_MODIFIED=$(git status -s | grep -i -E '.*circleci/config.yml')
                    }
                    setcommit || true
                    if [ -z "$FILES_MODIFIED" ]
                    then
                      echo "The CircleCI config is up to date."
                      exit 0;
                    else
                      echo "The CircleCI config is not up to date. Rebuild it from .circleci/config"
                      exit 1;
                    fi
                name: CircleCI config up to date
            - run:
                command: circleci config validate
                name: Validate circle config
    restore_environment_variables:
        description: Sets the environment variables specified in the file 'environment_variables'. Make sure the file is persisted and has been attached.
        steps:
            - run:
                command: cat environment_variables
                name: List environment variables
            - run:
                command: cat environment_variables >> ${BASH_ENV}
                name: Restore environment variables
jobs:
    build:
        docker:
            - image: circleci/node:12.16.3
        environment:
            TOTAL_CPUS: 1
            TZ: Europe/Berlin
        resource_class: small
        shell: /bin/bash -eo pipefail
        steps:
            - run:
                command: echo "CPU count is ${TOTAL_CPUS}"
                name: Show current CPU count
            - checkout
            - check_config
            - restore_cache:
                keys:
                    - 2-yarn-{{ arch }}-{{ checksum "yarn.lock" }}
                    - 2-yarn-{{ arch }}-
                name: Restore Yarn Package Cache
            - run:
                command: yarn install --frozen-lockfile
                name: Install Dependencies
            - save_cache:
                key: 2-yarn-{{ arch }}-{{ checksum "yarn.lock" }}
                name: Save Yarn Package Cache
                paths:
                    - ~/.cache/yarn
                    - node_modules
            - run:
                command: yarn run lint
                name: Check linting
            - run:
                command: yarn run flow:check-now --max-workers ${TOTAL_CPUS}
                name: Check flow
            - run:
                command: yarn run test --ci --maxWorkers ${TOTAL_CPUS}
                name: Unit tests
            - run:
                command: yarn run test:coverage --ci --maxWorkers ${TOTAL_CPUS}
                name: Test coverage
            - run:
                command: echo "export NEW_VERSION_NAME=$(tools/next-version calc | jq .versionName)" >> environment_variables
                name: Calculate next version
            - run:
                command: yarn build:integreat-test-cms --env.commit_sha=${CIRCLE_SHA1}
                name: Development integreat-test-cms build
            - run:
                command: yarn build:integreat
                name: Production integreat build
            - run:
                command: yarn build:malte
                name: Production malte build
            - run:
                command: yarn run check:build
                name: Check build
            - store_artifacts:
                path: dist
            - persist_to_workspace:
                paths:
                    - dist
                    - node_modules
                    - environment_variables
                root: ./
            - slack/status:
                fail_only: true
                failure_message: ':fire: The $CIRCLE_JOB job has failed on the main branch! :fire:'
                include_job_number_field: false
                mentions: maxammann,st,UUZS7CMV0,UV99P8ETW
                only_for_branches: main
                webhook: ${SLACK_URL}
    deliver:
        docker:
            - image: circleci/node:12.16.3
        parameters:
            production_delivery:
                description: Whether to deliver to production (integreat.app and malteapp.de) or not (webnext.integreat.app and webnext.malteapp.de).
                type: boolean
        resource_class: small
        shell: /bin/bash -eo pipefail
        steps:
            - add_ssh_keys:
                fingerprints:
                    - 30:f4:98:9f:1c:72:d1:c0:17:9f:57:05:74:a6:44:50
            - attach_workspace:
                at: .
            - restore_environment_variables
            - when:
                condition: << parameters.production_delivery >>
                steps:
                    - run:
                        command: sftp -v -o StrictHostKeyChecking=no web@web.integreat-app.de:/integreat.app \<<< $'put -r dist/integreat/*'
                        name: Integreat production delivery
                    - run:
                        command: sftp -v -o StrictHostKeyChecking=no web@web.integreat-app.de:/malteapp.de \<<< $'put -r dist/malte/*'
                        name: Malte production delivery
                    - slack/notify:
                        message: WebApp version ${NEW_VERSION_NAME} was delivered successfully to integreat.app and malteapp.de!
                        webhook: ${SLACK_URL}
            - unless:
                condition: << parameters.production_delivery >>
                steps:
                    - run:
                        command: sftp -v -o StrictHostKeyChecking=no web@web.integreat-app.de:/webnext.integreat.app \<<< $'put -r dist/integreat-test-cms/*'
                        name: Integreat development delivery
                    - run:
                        command: sftp -v -o StrictHostKeyChecking=no web@web.integreat-app.de:/webnext.malteapp.de \<<< $'put -r dist/malte/*'
                        name: Malte development delivery
            - slack/status:
                fail_only: true
                failure_message: ':fire: The $CIRCLE_JOB job has failed on the main branch! :fire:'
                include_job_number_field: false
                mentions: maxammann,st,UUZS7CMV0,UV99P8ETW
                only_for_branches: main
                webhook: ${SLACK_URL}
    prepare_production_delivery:
        docker:
            - image: circleci/node:12.16.3
        resource_class: small
        steps:
            - checkout
            - attach_workspace:
                at: .
            - restore_environment_variables
            - run:
                command: tools/create-jira-release create-release ${NEW_VERSION_NAME} --private-key ${JIRA_PRIVATE_KEY} --access-token ${JIRA_OAUTH_TOKEN} --consumer-key ${JIRA_CONSUMER_KEY} --project-name ${CIRCLE_PROJECT_REPONAME}
                name: Create jira release
            - run:
                command: tools/move-release-notes move-to ${NEW_VERSION_NAME} --deliverino-private-key ${DELIVERINO_PRIVATE_KEY} --owner ${CIRCLE_PROJECT_USERNAME} --repo ${CIRCLE_PROJECT_REPONAME} --branch ${CIRCLE_BRANCH} --commit-sha ${CIRCLE_SHA1}
                name: Move release notes
            - run:
                command: tools/bump-version bump-to ${NEW_VERSION_NAME} --deliverino-private-key ${DELIVERINO_PRIVATE_KEY} --owner ${CIRCLE_PROJECT_USERNAME} --repo ${CIRCLE_PROJECT_REPONAME} --branch ${CIRCLE_BRANCH} --release-notes "$(tools/parse-release-notes parse --web)"
                name: Bump version
            - slack/status:
                fail_only: true
                failure_message: ':fire: The $CIRCLE_JOB job has failed on the main branch! :fire:'
                include_job_number_field: false
                mentions: maxammann,st,UUZS7CMV0,UV99P8ETW
                only_for_branches: main
                webhook: ${SLACK_URL}
orbs:
    slack: circleci/slack@3.4.2
parameters:
    api_triggered:
        default: false
        description: Whether the pipeline was triggered through the CircleCi API (https://circleci.com/docs/api/v2/?shell#trigger-a-new-pipeline).
        type: boolean
    production_delivery:
        default: false
        description: Whether to deliver to production (integreat.app and malteapp.de) or not (webnext.integreat-app.de and webnext.malteapp.de).
        type: boolean
version: 2.1
workflows:
    api_triggered_development_delivery:
        jobs:
            - build
            - deliver:
                production_delivery: false
                requires:
                    - build
        when:
            and:
                - << pipeline.parameters.api_triggered >>
                - not: << pipeline.parameters.production_delivery >>
    api_triggered_production_delivery:
        jobs:
            - build
            - prepare_production_delivery:
                requires:
                    - build
            - deliver:
                production_delivery: true
                requires:
                    - prepare_production_delivery
        when:
            and:
                - << pipeline.parameters.api_triggered >>
                - << pipeline.parameters.production_delivery >>
    bi_weekly_prduction_delivery:
        jobs:
            - build
            - prepare_production_delivery:
                requires:
                    - build
            - await_approval:
                requires:
                    - prepare_production_delivery
                type: approval
            - deliver:
                production_delivery: true
                requires:
                    - await_approval
        triggers:
            - schedule:
                cron: 0 5 1,15 * *
                filters:
                    branches:
                        only:
                            - main
    commit:
        jobs:
            - build
            - deliver:
                filters:
                    branches:
                        only:
                            - main
                production_delivery: false
                requires:
                    - build
        unless: << pipeline.parameters.api_triggered >>
    version: 2

