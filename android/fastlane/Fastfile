fastlane_version "2.143.0"

default_platform :android

platform :android do
  CREDENTIALS_GIT_REPOSITORY_URL = ENV['CREDENTIALS_GIT_REPOSITORY_URL']
  CREDENTIALS_DIRECTORY_PATH = ENV['CREDENTIALS_DIRECTORY_PATH']
  CREDENTIALS_KEYSTORE_PATH = ENV['CREDENTIALS_KEYSTORE_PATH']


  KEYSTORE_PATH = ENV['KEYSTORE_PATH'] || 'test.keystore'
  KEYSTORE_KEY_ALIAS = ENV['KEYSTORE_KEY_ALIAS'] || 'test'
  KEYSTORE_PASSWORD = ENV['KEYSTORE_PASSWORD'] || '123456'
  KEYSTORE_KEY_PASSWORD = ENV['KEYSTORE_KEY_PASSWORD'] || '123456'

  desc "Prepare the keystore"
  lane :keystore do
    unless CREDENTIALS_GIT_REPOSITORY_URL
      UI.crash!('Unable to prepare keystore as remote information is missing')
    end

    puts("Cloning repository with keystore")

    unless File.exists? File.expand_path(CREDENTIALS_DIRECTORY_PATH)
      sh("git clone #{CREDENTIALS_GIT_REPOSITORY_URL} #{CREDENTIALS_DIRECTORY_PATH}")
    end

    puts("Decrypting keystore")

    sh("openssl enc -d -aes-256-cbc -md sha512 -pbkdf2 -iter 100000 -salt \\
          -in #{CREDENTIALS_KEYSTORE_PATH} -out #{KEYSTORE_PATH} \\
          -pass pass:$CREDENTIALS_KEYSTORE_PASSWORD")
  end

  desc "Create a release build"
  lane :dependencies do
    gradle(task: "androidDependencies")
  end

  desc "Create a release build"
  lane :build do
    gradle(
        task: "build",
        properties: {
            :versionCode => 100008,
            :versionName => "2020.3.2",
            :KEYSTORE_PATH => KEYSTORE_PATH,
            :KEYSTORE_KEY_ALIAS => KEYSTORE_KEY_ALIAS,
            :KEYSTORE_PASSWORD => KEYSTORE_PASSWORD,
            :KEYSTORE_KEY_PASSWORD => KEYSTORE_KEY_PASSWORD
        },
        print_command: false
    )
  end


  desc "Upload to Browserstack"
  lane :browserstack_upload do
    upload_to_browserstack_app_live(
        browserstack_username: ENV["BROWSERSTACK_USERNAME"],
        browserstack_access_key: ENV["BROWSERSTACK_ACCESS_KEY"],
        file_path: "app/build/outputs/apk/release/app-release.apk"
    )
  end

  before_all do
  end

  after_all do |lane|
  end

  error do |lane, exception|
  end
end
