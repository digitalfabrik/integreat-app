buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'
    }
}

import groovy.json.JsonSlurper

import java.text.DateFormat
import java.text.SimpleDateFormat
import java.util.stream.Collectors
import org.apache.commons.lang3.StringUtils

def createConfig() {
    def buildConfigName

    if (!System.env["BUILD_CONFIG_NAME"]) {
        logger.warn("WARNING: No build config specified. Using the build config 'integreat'!")
        buildConfigName = 'integreat'
    } else {
        buildConfigName = System.env['BUILD_CONFIG_NAME']
    }

    logger.quiet("Using build config $buildConfigName")

    def command = "yarn --silent babel-node tools/build-config to-json $buildConfigName"
    def proc = command.execute()
    proc.waitFor()

    if (proc.exitValue() != 0) {
        logger.error("Failed to get build config: $proc.err.text")
        return
    }
    def json = proc.in.text
    logger.quiet("Build Config as JSON: $json")

    def buildConfig = new JsonSlurper().parseText(json)

    project.ext.set("buildConfig", buildConfig)
}

createConfig()

def joinKeys(List<String> keys) {
    return String.join("_", keys.stream().map({ key -> decamelize(key) }).collect(Collectors.toList())).toUpperCase()
}

def decamelize(String key) {
    return String.join("_", StringUtils.splitByCharacterTypeCamelCase(key))
}

def flattenBuildConfig(keys, buildConfig, resValue) {
    if (buildConfig == null) {
        resValue("string", joinKeys(keys), "null")
    }

    if (buildConfig instanceof String) {
        resValue("string", joinKeys(keys), "\"${buildConfig.replaceAll("%", "\\\\u0025")}\"")
    } else if (buildConfig instanceof Number) {
        resValue("integer", joinKeys(keys), Integer.toString(buildConfig.intValue()))
    } else if (buildConfig instanceof Boolean) {
        resValue("bool", joinKeys(keys), buildConfig.toString())
    } else if (buildConfig instanceof Date) {
        TimeZone tz = TimeZone.getTimeZone("UTC");
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'");
        df.setTimeZone(tz);
        resValue("string", joinKeys(keys), df.format(buildConfig))
    } else if (buildConfig instanceof Map) {
        buildConfig.each {
            def newKeys = new ArrayList<String>(keys)
            newKeys.add(it.key.toString())
            flattenBuildConfig(newKeys, it.value, resValue)
        }
    } else if (buildConfig instanceof List) {
        buildConfig.eachWithIndex { Object value, int i ->
            def newKeys = new ArrayList(keys)
            newKeys.add(Integer.toString(i))
            flattenBuildConfig(newKeys, value, resValue)
        }
    }
}

def setupGoogleServices(buildConfig, resValue) {
    def gs = buildConfig.android.googleServices

    if (gs == null) {
        logger.warn("WARNING: Google Services are not used in this build!")
        return
    }

    resValue("string", "google_app_id", gs.google_app_id)
    resValue("string", "gcm_defaultSenderId", gs.gcm_defaultSenderId)
    resValue("string", "default_web_client_id", gs.default_web_client_id)
    if (gs.ga_trackingId != null) {
        resValue("string", "ga_trackingId", gs.ga_trackingId)
    }
    resValue("string", "firebase_database_url", gs.firebase_database_url)
    resValue("string", "google_api_key", gs.google_api_key)
    resValue("string", "google_crash_reporting_api_key", gs.google_crash_reporting_api_key)
    resValue("string", "project_id", gs.project_id)
}

android {
    defaultConfig {
        applicationId project.buildConfig.android.applicationId ?: "tuerantuer.app.integreat"
        flattenBuildConfig([], project.buildConfig, {
            String type, String name, String value -> resValue(type, "BUILD_CONFIG_$name", value)
        })

        setupGoogleServices(project.buildConfig, {
            String type, String name, String value -> resValue(type, name, value)
        })
    }
}
