fastlane_version "2.156.1"

require_relative "read_build_config"

require "yaml"

# The following parameters have to be passed:
# version_code: The version code of the app
# version_name: The version name of the app
# package_name: The name of the app in Sentry
# sourcemap_path: The path to the sourcemap file to upload
desc "Upload source map to Sentry"
private_lane :generic_sentry_upload do |options|
  ensure_env_vars(
      env_vars: ["SENTRY_AUTH_TOKEN"]
  )

  version_code = options[:version_code]
  version_name = options[:version_name]
  package_name = options[:package_name]
  sourcemap_path = options[:sourcemap_path]

  if [version_name, version_code, package_name, sourcemap_path].include?(nil)
    raise "'nil' passed as parameter! Aborting..."
  end

  sentry_release_version = "#{package_name}@#{version_name}+#{version_code}"
  sentry_create_release(
      version: sentry_release_version,
      finalize: true
  )

  sentry_upload_sourcemap(
      version: sentry_release_version,
      dist: version_code.to_s,
      sourcemap: sourcemap_path,
      rewrite: true
  )
end

platform :android do
  # The following parameters have to be passed:
  # apk_path: The path of the apk to upload (relative to home dir)
  desc "Upload the APK to BrowserStack Live"
  lane :browserstack_upload_live do |options|
    ensure_env_vars(
        env_vars: ["BROWSERSTACK_USERNAME", "BROWSERSTACK_ACCESS_KEY"]
    )

    apk_path = options[:apk_path]

    if [apk_path].include?(nil)
      raise "'nil' passed as parameter! Aborting..."
    end

    upload_to_browserstack_app_live(
        browserstack_username: ENV["BROWSERSTACK_USERNAME"],
        browserstack_access_key: ENV["BROWSERSTACK_ACCESS_KEY"],
        file_path: "#{ENV['HOME']}/#{apk_path}"
    )
  end

  # The following parameters have to be passed:
  # apk_path: The path of the apk to upload (relative to home dir)
  desc "Upload the APK and run E2E tests on BrowserStack"
  lane :browserstack_e2e_tests do |options|
    ensure_env_vars(
        env_vars: ["BROWSERSTACK_USERNAME", "BROWSERSTACK_ACCESS_KEY"]
    )

    apk_path = options[:apk_path]

    if [apk_path].include?(nil)
      raise "'nil' passed as parameter! Aborting..."
    end

    upload_to_browserstack_app_automate(
        browserstack_username: ENV["BROWSERSTACK_USERNAME"],
        browserstack_access_key: ENV["BROWSERSTACK_ACCESS_KEY"],
        file_path: "#{ENV['HOME']}/#{apk_path}"
    )

    ENV["E2E_CONFIG"] = "browserstack_ci_android"
    ENV["E2E_BROWSERSTACK_USER"] = ENV["BROWSERSTACK_USERNAME"]
    ENV["E2E_BROWSERSTACK_KEY"] = ENV["BROWSERSTACK_ACCESS_KEY"]
    ENV["E2E_BROWSERSTACK_APP"] = lane_context[SharedValues::BROWSERSTACK_APP_ID]

    yarn(
        command: "test:e2e",
        package_path: "package.json"
    )
  end

  # The following parameters have to be passed:
  # version_code: The version code of the app
  # version_name: The version name of the app
  # build_config_name: The name of the build config
  # sourcemap_path: The path to the sourcemap to upload (relative to home dir)
  desc "Upload the JavaScript source map to Sentry"
  lane :sentry_upload do |options|
    version_code = options[:version_code]
    version_name = options[:version_name]
    build_config_name = options[:build_config_name]
    sourcemap_path = options[:sourcemap_path]

    if [version_name, version_code, build_config_name, sourcemap_path].include?(nil)
      raise "'nil' passed as parameter! Aborting..."
    end

    build_config = read_build_config(build_config_name, 'android')

    generic_sentry_upload(
        package_name: build_config['applicationId'],
        sourcemap_path: "#{ENV['HOME']}/#{sourcemap_path}",
        version_name: version_name,
        version_code: version_code
    )
  end

  # The following parameters have to be passed:
  # version_code: The version code of the app
  # version_name: The version name of the app
  # build_config_name: The name of the build config
  # apk_path: The path of the apk to upload (relative to home dir)
  # production_delivery: Whether the apk should be uploaded to the production track
  desc "Deliver the app to Play Store. Depending on the option `production_delivery` the update is released to the general public."
  lane :playstore_upload do |options|
    ensure_env_vars(
        env_vars: ["GOOGLE_SERVICE_ACCOUNT_JSON"]
    )

    version_code = options[:version_code]
    version_name = options[:version_name]
    build_config_name = options[:build_config_name]
    apk_path = options[:apk_path]
    production_delivery = options[:production_delivery]

    if [version_name, version_code, build_config_name, apk_path, production_delivery].include?(nil)
      raise "'nil' passed as parameter! Aborting..."
    end

    build_config = read_build_config(build_config_name, 'android')
    skip_metadata = build_config_name != "integreat"
    track = production_delivery === true ? "production" : "beta"

    puts("delivering #{build_config_name} v#{version_name} to track #{track}")
    puts("skip_metadata: #{skip_metadata}")

    # https://docs.fastlane.tools/actions/supply/
    upload_to_play_store(
        version_code: version_code,
        version_name: version_name,
        package_name: build_config['applicationId'],
        metadata_path: "./android/fastlane/#{build_config_name}/metadata",
        track: track,
        skip_upload_changelogs: false,
        skip_upload_images: skip_metadata,
        skip_upload_screenshots: skip_metadata,
        skip_upload_metadata: skip_metadata,
        release_status: "completed",
        apk: "#{ENV['HOME']}/#{apk_path}",
        json_key_data: ENV["GOOGLE_SERVICE_ACCOUNT_JSON"]
    )
  end
end

platform :ios do
  # The following parameters have to be passed:
  # ipa_path: The path of the ipa to upload (relative to home dir)
  desc "Upload the IPA to BrowserStack Live"
  lane :browserstack_upload_live do |options|
    ensure_env_vars(
        env_vars: ["BROWSERSTACK_USERNAME", "BROWSERSTACK_ACCESS_KEY"]
    )

    ipa_path = options[:ipa_path]

    if [ipa_path].include?(nil)
      raise "'nil' passed as parameter! Aborting..."
    end

    upload_to_browserstack_app_live(
        browserstack_username: ENV["BROWSERSTACK_USERNAME"],
        browserstack_access_key: ENV["BROWSERSTACK_ACCESS_KEY"],
        file_path: "#{ENV['HOME']}/#{ipa_path}"
    )
  end

  # The following parameters have to be passed:
  # build_config_name: The name of the build config
  # ipa_path: The path of the ipa to upload (relative to home dir)
  desc "Upload the IPA and run E2E tests on BrowserStack"
  lane :browserstack_e2e_tests do |options|
    ensure_env_vars(
        env_vars: ["BROWSERSTACK_USERNAME", "BROWSERSTACK_ACCESS_KEY"]
    )

    ipa_path = options[:ipa_path]

    if [ipa_path].include?(nil)
      raise "'nil' passed as parameter! Aborting..."
    end

    upload_to_browserstack_app_automate(
        browserstack_username: ENV["BROWSERSTACK_USERNAME"],
        browserstack_access_key: ENV["BROWSERSTACK_ACCESS_KEY"],
        file_path: "#{ENV['HOME']}/#{ipa_path}"
    )

    ENV["E2E_CONFIG"] = "browserstack_ci_ios"
    ENV["E2E_BROWSERSTACK_USER"] = ENV["BROWSERSTACK_USERNAME"]
    ENV["E2E_BROWSERSTACK_KEY"] = ENV["BROWSERSTACK_ACCESS_KEY"]
    ENV["E2E_BROWSERSTACK_APP"] = lane_context[SharedValues::BROWSERSTACK_APP_ID]
    yarn(
        command: "test:e2e",
        package_path: "package.json"
    )
  end

  # The following parameters have to be passed:
  # version_code: The version code of the app
  # version_name: The version name of the app
  # build_config_name: The name of the build config
  # sourcemap_path: The path to the sourcemap to upload (relative to home dir)
  desc "Upload source map to Sentry"
  lane :sentry_upload do |options|
    version_code = options[:version_code]
    version_name = options[:version_name]
    build_config_name = options[:build_config_name]
    sourcemap_path = options[:sourcemap_path]

    if [version_name, version_code, build_config_name, sourcemap_path].include?(nil)
      raise "'nil' passed as parameter! Aborting..."
    end

    build_config = read_build_config(build_config_name, 'ios')

    generic_sentry_upload(
        package_name: build_config['bundleIdentifier'],
        sourcemap_path: "#{ENV['HOME']}/#{sourcemap_path}",
        version_code: version_code,
        version_name: version_name
    )
  end

  # The following parameters have to be passed:
  # version_name: The version name of the app
  # build_config_name: The name of the build config
  # ipa_path: The path of the ipa to upload (relative to home dir)
  desc "Deliver the app to App Store Connect. The app is submitted for review and released automatically."
  lane :appstoreconnect_upload do |options|
    ensure_env_vars(
        env_vars: ["FASTLANE_USER", "FASTLANE_PASSWORD"]
    )

    version_name = options[:version_name]
    ipa_path = options[:ipa_path]
    build_config_name = options[:build_config_name]

    if [version_name, ipa_path, build_config_name].include?(nil)
      raise "'nil' passed as parameter! Aborting..."
    end

    skip_screenshots = build_config_name != "integreat"

    puts("delivering #{build_config_name} v#{version_name}")
    puts("skip_screenshots: #{skip_screenshots}")

    # https://docs.fastlane.tools/actions/deliver/
    deliver(
        ipa: "#{ENV['HOME']}/#{ipa_path}",
        app_version: version_name,
        submit_for_review: true,
        automatic_release: true,
        force: true,
        skip_screenshots: skip_screenshots,
        skip_metadata: false,
        skip_app_version_update: false,
        metadata_path: "./ios/fastlane/#{build_config_name}/metadata",
        screenshots_path: "./ios/fastlane/#{build_config_name}/screenshots",
        precheck_include_in_app_purchases: false, # We do not have inapp purchases
        submission_information: { add_id_info_uses_idfa: false }  # https://firebase.google.com/docs/analytics/configure-data-collection?platform=ios
                                                                  # https://support.google.com/firebase/answer/6318039?hl=en
    )
  end

  # The following parameters have to be passed:
  # build_config_name: The name of the build config
  # ipa_path: The path of the ipa to upload (relative to home dir)
  desc "Deliver the app to TestFlight for testers"
  lane :testflight_upload do |options|
    ensure_env_vars(
        env_vars: ["FASTLANE_USER", "FASTLANE_PASSWORD"]
    )

    build_config_name = options[:build_config_name]
    ipa_path = options[:ipa_path]

    if [build_config_name, ipa_path].include?(nil)
      raise "'nil' passed as parameter! Aborting..."
    end

    build_config = read_build_config(build_config_name, 'ios')
    apple_id = build_config['appleId']

    # https://docs.fastlane.tools/actions/upload_to_testflight/
    upload_to_testflight(
        skip_waiting_for_build_processing: true,
        apple_id: apple_id,
        ipa: "#{ENV['HOME']}/#{ipa_path}",
        distribute_external: false
    )
  end
end
