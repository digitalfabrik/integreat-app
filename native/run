#!/usr/bin/env node

const { execSync } = require('child_process')
const { program } = require('commander')

function parseBashVariables(str) {
  const env = {}
  const regex = /(\w+)="((?:\\"|[^"])*)"/g
  let match
  while ((match = regex.exec(str)) !== null) {
    const key = match[1]
    const value = match[2].replace(/\\"/g, '"') // Handle escaped quotes
    env[key] = value
  }
  return env
}

program
  .command('packager <build_config_name>')
  .description('start metro packager')
  .action(buildConfigName => {
    const buildConfigStr = execSync(`yarn workspace build-configs manage to-bash ${buildConfigName} common`).toString()

    const buildConfig = parseBashVariables(buildConfigStr)
    const env = { ...process.env, ...buildConfig }

    execSync(`yarn react-native start --reset-cache`, { stdio: 'inherit', env })
  })

program
  .command('android <build_config_name>')
  .description('create android build')
  .option('--production', 'whether a production (release) build should be made')
  .action((buildConfigName, options) => {
    const { production } = options
    const buildFlag = production ? '--mode=release' : '--active-arch-only'

    const jsonBuildConfigStr = execSync(
      `yarn workspace build-configs manage to-json ${buildConfigName} android`,
    ).toString()
    const jsonBuildConfig = JSON.parse(jsonBuildConfigStr)
    const applicationId = jsonBuildConfig.applicationId

    const buildConfigStr = execSync(`yarn workspace build-configs manage to-bash ${buildConfigName} android`).toString()
    const buildConfig = parseBashVariables(buildConfigStr)
    const env = { ...process.env, ...buildConfig }

    execSync(`yarn react-native run-android --no-packager --appId ${applicationId} ${buildFlag}`, {
      stdio: 'inherit',
      env,
    })
  })

program.parse(process.argv)
