#!/usr/bin/env node

const { execSync, fork, spawn, exec, spawnSync } = require('child_process')
const { program } = require('commander')

program
  .command('packager <build_config_name>')
  .description('start metro packager')
  .action(buildConfigName => {
    const buildConfig = execSync(`yarn workspace --silent build-configs --silent manage to-bash ${buildConfigName} common`)
      .toString()
      .replace('/\n/g', ' ')
    execSync(`yarn cross-env-shell ${buildConfig}`)
    execSync(`yarn react-native start --reset-cache`, { stdio: 'inherit' })
  })

program
  .option('--production', 'whether a production (release) build should be made')
  .command('android <build_config_name>')
  .description('create android build')
  .action(buildConfigName => {
    const productionFlag = program.opts().production ? '--variant=release' : ''

    const jsonBuildConfig = execSync(`yarn workspace --silent build-configs --silent manage to-json ${buildConfigName} android`)
    const applicationId = JSON.parse(jsonBuildConfig).applicationId

    const buildConfig = execSync(`yarn workspace --silent build-configs --silent manage to-bash ${buildConfigName} android`)
      .toString()
      .replace('/\n/g', ' ')
    execSync(`yarn cross-env-shell ${buildConfig}`)
    execSync(`yarn react-native run-android --no-packager --appId ${applicationId} ${productionFlag}`, { stdio: 'inherit' })
  })

program.parse(process.argv)
