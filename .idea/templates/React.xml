<templateSet group="React">
  <template name="rrc" value="import React, {ReactElement} from 'react';&#10;import { connect } from 'react-redux';&#10;&#10;type $TM_FILENAME_BASE$Props = {&#10;}&#10;type $TM_FILENAME_BASE$State = {&#10;}&#10;class $TM_FILENAME_BASE$ extends React.Component&lt;$TM_FILENAME_BASE$Props,$TM_FILENAME_BASE$State&gt; {&#10; constructor(props: $TM_FILENAME_BASE$Props) {&#10;  super(props);&#10;&#10;  this.state = {};&#10;&#10; }&#10;&#10; render() {&#10;  return (&#10;   &lt;div&gt;&#10;    $END$&#10;   &lt;/div&gt;&#10;  );&#10; }&#10;}&#10; &#10;const mapStateToProps: (state: IState) =&gt; MapStateToProps = state =&gt; ({&#10; &#10;});&#10;    &#10;export default connect(&#10;    mapStateToProps,&#10;)($componentName$);&#10;" description="Creates a React component class connected to redux" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="componentName" expression="" defaultValue="&quot;MyComponent&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="rcfc" value="import React, { Component, ReactElement } from 'react';&#10;&#10;type $TM_FILENAME_BASE$Props = {&#10;}&#10;type $TM_FILENAME_BASE$State = {&#10;}&#10;&#10;class $componentName$ extends Component&lt;$TM_FILENAME_BASE$Props,$TM_FILENAME_BASE$State&gt; {&#10;    constructor(props: $TM_FILENAME_BASE$Props) {&#10;        super(props);&#10;    }&#10;    &#10;    componentWillMount() {&#10;    &#10;    }&#10;    &#10;    componentDidMount() {&#10;    &#10;    }&#10;    &#10;    componentWillReceiveProps(nextProps) {&#10;    &#10;    }&#10;    &#10;    shouldComponentUpdate(nextProps, nextState) {&#10;    &#10;    }&#10;    &#10;    componentWillUpdate(nextProps, nextState) {&#10;    &#10;    }&#10;    &#10;    componentDidUpdate(prevProps, prevState) {&#10;    &#10;    }&#10;    &#10;    componentWillUnmount() {&#10;    &#10;    }&#10;    &#10;    render(): ReactElement {&#10;        return (&#10;            &lt;div&gt;&#10;                $END$&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;}&#10;&#10;export default $componentName$;&#10;" description="Creates a React component class with all lifecycle methods and ES6 module system" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="componentName" expression="" defaultValue="&quot;MyComponent&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="rfc" value="import React, {ReactElement} from 'react';&#10;&#10;type $TM_FILENAME_BASE$Props = {&#10;}&#10;&#10;const $TM_FILENAME_BASE$: React.FC&lt;$TM_FILENAME_BASE$Props&gt; = (props:$TM_FILENAME_BASE$Props):ReactElement =&gt; {&#10;    return (&#10;        &lt;div&gt;&#10;            $END$&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;export default $TM_FILENAME_BASE$;&#10;" description="Creates a stateless React component with interface ES6 module system" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="con" value="constructor(props) {&#10;    super(props: $TM_FILENAME_BASE$Props);&#10;    $END$&#10;}&#10;" description="Adds a default constructor for the class that contains props as arguments" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="conc" value="constructor(props, context) {&#10;    super(props, context);&#10;    $END$&#10;}&#10;" description="Adds a default constructor for the class that contains props and context as arguments" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="cwm" value="componentWillMount() {&#10;    $END$&#10;}&#10;" description="Invoked once, both on the client and server, immediately before the initial rendering occurs" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="cdm" value="&#10;componentDidMount() {&#10;    $END$&#10;}&#10;" description="Invoked once, only on the client (not on the server), immediately after the initial rendering occurs." toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="scu" value="&#10;shouldComponentUpdate(nextProps, nextState) {&#10;    $END$&#10;}&#10;" description="Invoked before rendering when new props or state are being received." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="cwup" value="componentWillUpdate(nextProps, nextState) {&#10;    $END$&#10;}&#10;" description="Invoked immediately before rendering when new props or state are being received." toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="cdup" value="&#10;componentDidUpdate(prevProps, prevState) {&#10;    $END$&#10;}&#10;" description="Invoked immediately after the component's updates are flushed to the DOM." toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="cwun" value="componentWillUnmount() {&#10;    $END$&#10;}&#10;" description="Invoked immediately before a component is unmounted from the DOM." toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="ren" value="&#10;render(): ReactElement {&#10;    return (&#10;        &lt;div&gt;&#10;            $END$&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" description="When called, it should examine this.props and this.state and return a single child element." toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="ssf" value="&#10;this.setState((state, props) =&gt; { &#10;    return {&#10;        $END$ &#10;    };&#10;});&#10;" description="Performs a shallow merge of nextState into current state" toReformat="false" toShortenFQNames="true">
    <context />
  </template>
  <template name="rcc" value="import React, { Component } from 'react';&#10;&#10;class $TM_FILENAME_BASE$ extends Component {&#10; render() {&#10;  return (&#10;   &lt;div&gt;&#10;    $END$&#10;   &lt;/div&gt;&#10;  );&#10; }&#10;}&#10;&#10;export default $TM_FILENAME_BASE$;" description="Creates a A higher-order component" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="rpc" value="import React, {ReactElement} from 'react';&#10;&#10;type $TM_FILENAME_BASE$Props = {&#10;}&#10;type $TM_FILENAME_BASE$State = {&#10;}&#10;class $TM_FILENAME_BASE$ extends React.PureComponent&lt;$TM_FILENAME_BASE$Props,$TM_FILENAME_BASE$State&gt; {&#10; constructor(props: $TM_FILENAME_BASE$Props) {&#10;  super(props);&#10;&#10;  this.state = {};&#10;&#10; }&#10;&#10; render(): ReactElement {&#10;  return (&#10;   &lt;div&gt;&#10;    $END$&#10;   &lt;/div&gt;&#10;  );&#10; }&#10;}&#10;&#10;export default $TM_FILENAME_BASE$;" description="Creates a React pure component class with PropTypes and ES6 module system" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="rrdc" value="import React, { Component } from 'react';&#10;import { connect } from 'react-redux';&#10;&#10;type MapStateToProps = {&#10;}&#10;type MapDispatchToProps = {&#10;}&#10;&#10;type $TM_FILENAME_BASE$Props = MapStateToProps &amp; MapDispatchToProps &amp; {&#10;}&#10;type $TM_FILENAME_BASE$State = {&#10;}&#10;&#10;&#10;class $TM_FILENAME_BASE$ extends React.Component&lt;$TM_FILENAME_BASE$Props ,$TM_FILENAME_BASE$State&gt; {&#10; render() {&#10;  return (&#10;   &lt;div&gt;&#10;    $END$&#10;   &lt;/div&gt;&#10;  );&#10; }&#10;}&#10;&#10;const mapStateToProps: (state: IState) =&gt; MapStateToProps = state =&gt; ({&#10; &#10;});&#10;&#10;const mapDispatchToProps : (dispatch: Dispatch&lt;Action&gt;) =&gt; MapDispatchToProps = dispatch  =&gt; {&#10; return {&#10; }&#10;}&#10;&#10;export default connect(&#10; mapStateToProps, mapDispatchToProps&#10;)($TM_FILENAME_BASE$);" description="Creates a React component class connected to redux with dispatch" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="rccc" value="import React, {ReactElement} from 'react';&#10;&#10;type $TM_FILENAME_BASE$Props = {&#10;}&#10;type $TM_FILENAME_BASE$State = {&#10;}&#10;&#10;class $TM_FILENAME_BASE$ extends React.Component&lt;$TM_FILENAME_BASE$Props,$TM_FILENAME_BASE$State&gt; {&#10; constructor(props: $TM_FILENAME_BASE$Props) {&#10;  super(props);&#10;&#10;  this.state = {};&#10;&#10; }&#10;&#10; render(): ReactElement {&#10;  return (&#10;   &lt;div&gt;&#10;    $END$&#10;   &lt;/div&gt;&#10;  );&#10; }&#10;}&#10;&#10;export default $TM_FILENAME_BASE$;" description="Creates a React component class with constructor and interfaces" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="useState" value="const [$state$, set$setState$] = useState&lt;&gt;($initState$);$END$" description="useState" toReformat="true" toShortenFQNames="true">
    <variable name="state" expression="" defaultValue="&quot;state&quot;" alwaysStopAt="true" />
    <variable name="setState" expression="capitalize(state)" defaultValue="" alwaysStopAt="true" />
    <variable name="initState" expression="" defaultValue="&quot;initState&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="useEffect" value="useEffect(() =&gt; {&#10;$effect$&#10;  return () =&gt; {&#10;  // CleanUp&#10;    $effect$&#10;  };&#10;}, [$deps$]);&#10;$END$" description="useEffect" toReformat="true" toShortenFQNames="true">
    <variable name="effect" expression="" defaultValue="&quot;effect&quot;" alwaysStopAt="true" />
    <variable name="deps" expression="" defaultValue="&quot;deps&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="useCallback" value="const memoizedCallback = useCallback(&#10;  () =&gt; {&#10;    $callback$&#10;  },&#10;  [$input$],&#10;);&#10;$END$" description="useCallback" toReformat="true" toShortenFQNames="true">
    <variable name="callback" expression="" defaultValue="&quot;doSomething(a, b)&quot;" alwaysStopAt="true" />
    <variable name="input" expression="" defaultValue="&quot;a, b&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="useMemo" value="const memoizedValue = useMemo(() =&gt; computeExpensiveValue(a, b), [a, b]);$END$" description="useMemo" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="rntc" value="import React from 'react'&#10;import { render } from '@testing-library/react-native'&#10;&#10;describe('$TM_FILENAME_BASE$', () =&gt; {&#10;  it('should render $TM_FILENAME_BASE$', () =&gt; {&#10;    const { getByText } = render(&lt;&gt;&lt;/&gt;)&#10;    expect(getByText('send')).toBeDisabled()&#10;  })&#10;})" description="Create standard component test with react-native testing-library" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="rnfc" value="import React, {ReactElement} from 'react';&#10;import {View} from 'react-native'&#10;&#10;type $TM_FILENAME_BASE$Props = {&#10;}&#10;&#10;const $TM_FILENAME_BASE$: React.FC&lt;$TM_FILENAME_BASE$Props&gt; = (props:$TM_FILENAME_BASE$Props):ReactElement =&gt; {&#10;    return (&#10;        &lt;View&gt;&#10;            $END$&#10;        &lt;/View&gt;&#10;    );&#10;};&#10;&#10;export default $TM_FILENAME_BASE$;&#10;" description="Creates a stateless React-Native component with interface ES6 module system" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="rnccc" value="import React, {ReactElement} from 'react';&#10;import {View} from 'react-native'&#10;&#10;type $TM_FILENAME_BASE$Props = {&#10;}&#10;type $TM_FILENAME_BASE$State = {&#10;}&#10;class $TM_FILENAME_BASE$ extends React.Component&lt;$TM_FILENAME_BASE$Props,$TM_FILENAME_BASE$State&gt; {&#10; constructor(props: $TM_FILENAME_BASE$Props) {&#10;  super(props);&#10;&#10;  this.state = {};&#10;&#10; }&#10;&#10; render(): ReactElement {&#10;  return (&#10;   &lt;View&gt;&#10;    $END$&#10;   &lt;/View&gt;&#10;  );&#10; }&#10;}&#10;&#10;export default $TM_FILENAME_BASE$;" description="Creates a React component class with constructor and interfaces" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="scnv" value="const $componentName$ = styled.View`&#10;`" description="styled view (native component)" toReformat="false" toShortenFQNames="true">
    <variable name="componentName" expression="" defaultValue="&quot;StyledView&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="scni" value="const $componentName$ = styled.Image`&#10;`" description="styled image(native component)" toReformat="true" toShortenFQNames="true">
    <variable name="componentName" expression="" defaultValue="&quot;StyledImage&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="scnt" value="const $componentName$ = styled.Text`&#10;`" description="styled text (native component)" toReformat="true" toShortenFQNames="true">
    <variable name="componentName" expression="" defaultValue="&quot;StyledText&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="useRef" value="const $ref$ = useRef&lt;&gt;($initialValue$);$END$" description="useRef" toReformat="true" toShortenFQNames="true">
    <variable name="ref" expression="" defaultValue="&quot;ref&quot;" alwaysStopAt="true" />
    <variable name="initialValue" expression="" defaultValue="&quot;initialValue&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="cref" value="this.$refName$Ref = React.createRef&lt;&gt;();$END$" description="Creates a ref" toReformat="true" toShortenFQNames="true">
    <variable name="refName" expression="" defaultValue="&quot;refName&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="hoc" value="import React from 'react'&#10;&#10;export default ($WrappedComponent$) =&gt; {&#10;  const $hocComponent$ = ({ ...props }) =&gt; &lt;$WrappedComponent$ {...props} /&gt;&#10;&#10;  return $hocComponent$&#10;}" description="Creates a React higher-order component" toReformat="true" toShortenFQNames="true">
    <variable name="WrappedComponent" expression="" defaultValue="&quot;WrappedComponent&quot;" alwaysStopAt="true" />
    <variable name="hocComponent" expression="" defaultValue="&quot;hocComponent&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="disp" value="const mapDispatchToProps : (dispatch: Dispatch&lt;Action&gt;) =&gt; MapDispatchToProps = dispatch  =&gt; {&#10; return {&#10; }&#10;}" description="Adds the redux mapDispatchToProps function" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="rnpc" value="import React, {ReactElement} from 'react';&#10;import {View} from 'react-native'&#10;&#10;type $TM_FILENAME_BASE$Props = {&#10;}&#10;type $TM_FILENAME_BASE$State = {&#10;}&#10;&#10;class $TM_FILENAME_BASE$ extends React.PureComponent&lt;$TM_FILENAME_BASE$Props,$TM_FILENAME_BASE$State&gt; {&#10; constructor(props: $TM_FILENAME_BASE$Props) {&#10;  super(props);&#10;&#10;  this.state = {};&#10;&#10; }&#10;&#10; render(): ReactElement {&#10;  return (&#10;   &lt;View&gt;&#10;    $END$&#10;   &lt;/View&gt;&#10;  );&#10; }&#10;}&#10;&#10;export default $TM_FILENAME_BASE$;" description="Creates a React pure component class with PropTypes and ES6 module system" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="rtc" value="import React from 'react'&#10;import { render } from '@testing-library/react'&#10;&#10;describe('$TM_FILENAME_BASE$', () =&gt; {&#10;  it('should render $TM_FILENAME_BASE$', () =&gt; {&#10;    const { getByText } = render(&lt;&gt;&lt;/&gt;)&#10;    expect(getByText('send')).toBeDisabled()&#10;  })&#10;})" description="Create standard component test with react testing-library" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>