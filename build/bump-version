#!/usr/bin/env node

const authenticate = require('./github-authentication')
const { program } = require('commander')

const VERSION_FILE = 'version.json'

program
  .option('-d, --debug', 'enable extreme logging')
  .requiredOption('--deliverino-private-key <deliverino-private-key>', 'private key of the deliverino github app in pem format with base64 encoding')
  .requiredOption('--owner <owner>', 'owner of the current repository, usually "Integreat"')
  .requiredOption('--repo <repo>', 'the current repository, usually "integreat-webapp" or "integreat-react-native-app"')
  .requiredOption('--branch <branch>', 'the current branch')

const commitAndTag = async (stringifiedNewVersion, { deliverinoPrivateKey, owner, repo, branch }) => {
  const appOctokit = await authenticate({ deliverinoPrivateKey, owner, repo })
  const versionFileContent = await appOctokit.repos.getContents({ owner, repo, path: VERSION_FILE, ref: branch })

  const newVersion = JSON.parse(stringifiedNewVersion)
  const { versionCode, versionName } = newVersion

  const contentBase64 = Buffer.from(stringifiedNewVersion).toString('base64')

  const message = versionCode
    ? `Bump version name to ${versionName} and version code to ${versionCode}\n[skip ci]`
    : `Bump version name to ${versionName}\n[skip ci]`

  const commit = await appOctokit.repos.createOrUpdateFile({
    owner,
    repo,
    path: VERSION_FILE,
    content: contentBase64,
    branch,
    message,
    sha: versionFileContent.data.sha
  })
  console.warn(`New version successfully commited with message "${message}"`)
  console.warn(commit)

  const commitSha = commit.data.commit.sha

  const tag = `${versionName}${versionCode ? ` (version code: ${versionCode})` : ''}`
  const tagMessage = `Release ${tag}. Release notes can be found in 'release-notes/${versionName}`

  const test = await appOctokit.git.createTag({
    owner,
    repo,
    tag,
    message: tagMessage,
    object: commitSha,
    type: 'commit'
  })
  console.warn(test)
}

program
  .command('bump_to <next-version>')
  .description('commits the supplied (stringified) version to github and tags the commit')
  .action(async newVersion => {
    try {
      await commitAndTag(newVersion, { ...program })
    } catch (e) {
      console.error(e)
      process.exit(1)
    }
  })

program.parse(process.argv)
