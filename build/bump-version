#!/usr/bin/env node

const authenticate = require('./github-authentication')
const { program } = require('commander')

const VERSION_FILE = 'version.json'

program
  .option('-d, --debug', 'enable extreme logging')
  .requiredOption('--deliverino-private-key <deliverino-private-key>', 'private key of the deliverino github app in pem format with base64 encoding')
  .requiredOption('--owner <owner>', 'owner of the current repository, usually "Integreat"')
  .requiredOption('--repo <repo>', 'the current repository, usually "integreat-webapp" or "integreat-react-native-app"')
  .requiredOption('--branch <branch>', 'the current branch')

const commitAndTag = async (versionName, versionCode, { deliverinoPrivateKey, owner, repo, branch }) => {
  const appOctokit = await authenticate({ deliverinoPrivateKey, owner, repo })
  // const versionFileContent = await appOctokit.repos.getContents({ owner, repo, path: VERSION_FILE, ref: branch })
  //
  // const contentBase64 = Buffer.from(JSON.stringify({ versionName, versionCode })).toString('base64')
  //
  // const message = versionCode
  //   ? `Bump version name to ${versionName} and version code to ${versionCode}\n[skip ci]`
  //   : `Bump version name to ${versionName}\n[skip ci]`
  //
  // const commit = await appOctokit.repos.createOrUpdateFile({
  //   owner,
  //   repo,
  //   path: VERSION_FILE,
  //   content: contentBase64,
  //   branch,
  //   message,
  //   sha: versionFileContent.data.sha
  // })
  // console.warn(`New version successfully commited with message "${message}"`)
  //
  // const commitSha = commit.data.commit.sha
  const commitSha = 'a6bad45c61cf06a26c71b5c998d1933ce09bc89c'

  const tagName = `${versionName}${versionCode ? ` (version code: ${versionCode})` : ''}`
  // const releaseNotesUrl = `https://github.com/${owner}/${repo}/tree/${branch}/release-notes/${versionName}`
  // const tagMessage = `Release ${tagName}. Release notes can be found [here](${releaseNotesUrl}).`
  //
  // const tag = await appOctokit.git.createTag({
  //   owner,
  //   repo,
  //   tag: tagName,
  //   message: tagMessage,
  //   object: commitSha,
  //   type: 'commit'
  // })
  // const tagSha = tag.data.sha

  const tagSha = '94fc29444ecab6f97e66c07f8665b40d8e5fdde1'

  const ref = await appOctokit.git.createRef({
    owner,
    repo,
    ref: `tags/${tagName}`,
    sha: tagSha
  })
  console.log(ref)

  const release = await appOctokit.repos.createRelease({
    owner,
    repo,
    tag_name: tagName
  })
  console.log(release)
}

program
  .command('bump_to <new-version-name> [new-version-code]')
  .description('commits the supplied version name and code to github and tags the commit')
  .action(async (newVersionName, newVersionCode) => {
    try {
      await commitAndTag(newVersionName, newVersionCode, program)
    } catch (e) {
      console.error(e)
      process.exit(1)
    }
  })

program.parse(process.argv)
