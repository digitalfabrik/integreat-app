#!/usr/bin/env node

const { Octokit } = require('@octokit/rest')
const { createAppAuth } = require('@octokit/auth-app')
const fs = require('fs')
const { program } = require('commander')

program
  .option('-d, --debug', 'enable extreme logging')
  .option('--dry-run', 'prevent actual commit of the updated version.json to github')
  .option('--version-file <version-file>', 'set version file to use', 'version.json')
  .option('--deliverino-private-key <deliverino-private-key>', 'private key of the deliverino github app in pem format with base64 encoding')
  .option('--owner <owner>', 'owner of the current repository, usually "Integreat"')
  .option('--repo <repo>', 'the current repository, usually "integreat-webapp" or "integreat-react-native-app"')
  .option('--branch <branch>', 'the current branch')

const calculateNewVersion = versionFilePath => {
  const versionFile = fs.readFileSync(versionFilePath)
  // versionCode is just used in the integreat-react-native-app
  const { versionName, versionCode } = JSON.parse(versionFile)
  const versionNameParts = versionName.split('.')

  const date = new Date()
  const year = date.getFullYear()
  const month = date.getMonth() + 1

  const versionNameCounter = year === versionNameParts[0] && month === versionNameParts[1] ? versionNameParts[2] + 1 : 0
  const newVersionName = `${year}.${month}.${versionNameCounter}`
  const newVersionCode = versionCode ? versionCode + 1 : undefined

  console.warn(`New version name: ${newVersionName}`)
  if (newVersionCode) {
    console.warn(`New version name: ${newVersionCode}`)
  }

  return {
    versionName: newVersionName,
    versionCode: newVersionCode
  }
}

const commitVersionBump = async (newVersion, { versionFile, deliverinoPrivateKey, owner, repo, branch }) => {
  const appId = 59249 // https://github.com/apps/deliverino
  const privateKey = Buffer.from(deliverinoPrivateKey, 'base64').toString('ascii')

  const octokit = new Octokit({ authStrategy: createAppAuth, auth: { id: appId, privateKey: privateKey } })
  const { data: { id: installationId } } = await octokit.apps.getRepoInstallation({ owner, repo })
  const { data: { token } } = await octokit.apps.createInstallationToken({ installation_id: installationId })

  const appOctokit = new Octokit({ auth: token })
  const versionFileContent = await appOctokit.repos.getContents({ owner, repo, path: versionFile, ref: branch })

  const { versionCode, versionName } = newVersion
  const contentBase64 = Buffer.from(JSON.stringify(newVersion)).toString('base64')

  const message = versionCode
    ? `Bump version name to ${versionName} and version code to ${versionCode}\n[skip ci]`
    : `Bump version name to ${versionName}\n[skip ci]`

  await appOctokit.repos.createOrUpdateFile({
    owner,
    repo,
    path: versionFile,
    content: contentBase64,
    branch,
    message,
    sha: versionFileContent.data.sha
  })

  console.debug(`Bumped version successfully commited with message "${message}"`)
}

program
  .command('bump-version')
  .description('bump the current versionName (and versionCode if available) and commit to github')
  .action(async () => {
    try {
      const { dryRun, versionFile, deliverinoPrivateKey, owner, repo, branch } = program
      if (!dryRun) {
        if (!deliverinoPrivateKey) {
          throw new Error('deliverino private key not specified')
        } else if (!owner) {
          throw new Error('owner not specified')
        } else if (!repo) {
          throw new Error('repo not specified')
        } else if (!branch) {
          throw new Error('branch not specified')
        }
      }

      const newVersion = calculateNewVersion(versionFile)

      if (!dryRun) {
        await commitVersionBump(newVersion, { versionFile, deliverinoPrivateKey, owner, repo, branch })
      }

      console.log(JSON.stringify(newVersion))
    } catch (e) {
      console.error(e)
      process.exit(1)
    }
  })

program.parse(process.argv)
